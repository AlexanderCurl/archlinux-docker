default:
  image: "archlinux:latest"

stages:
  - lint
  - rootfs
  - image
  - test
  - release
  - publish

lint:
  stage: lint
  image: hadolint/hadolint:latest
  # DL3007: We use the latest tag for multistage build
  script: hadolint --ignore DL3007 --ignore DL3020 Dockerfile.template

get_version:
  stage: .pre
  script:
    - |
      # If we're building a tagged release, use the tag (without the 'v' prefix) as the
      # BUILD_VERSION. Otherwise, determine a new BUILD_VERSION.
      if [[ -n "$CI_COMMIT_TAG" ]]; then
        echo "BUILD_VERSION=${CI_COMMIT_TAG/v/}" > build.env
      else
        echo "BUILD_VERSION=$(date +%Y%m%d).$CI_JOB_ID" > build.env
      fi
    - export $(< build.env)
  artifacts:
    reports:
      dotenv: build.env

.rootfs:
  stage: rootfs
  before_script:
    - pacman -Syu --noconfirm make devtools fakechroot fakeroot
  artifacts:
    paths:
      - output/*
    expire_in: 2h

rootfs:base:
  extends: .rootfs
  except:
    - master
    - add-base-devel-tags
    - schedules
    - tags
  script:
    - make $PWD/output/base.tar.xz $PWD/output/Dockerfile.base

rootfs:base-devel:
  extends: .rootfs
  except:
    - master
    - add-base-devel-tags
    - schedules
    - tags
  script:
    - make $PWD/output/base-devel.tar.xz $PWD/output/Dockerfile.base-devel

rootfs:base:secure:
  extends: .rootfs
  tags:
    - secure
  only:
    - master
    - add-base-devel-tags
    - schedules
  except:
    - tags
  script:
    - make $PWD/output/base.tar.xz $PWD/output/Dockerfile.base

rootfs:base-devel:secure:
  extends: .rootfs
  tags:
    - secure
  only:
    - master
    - add-base-devel-tags
    - schedules
  except:
    - tags
  script:
    - make $PWD/output/base-devel.tar.xz $PWD/output/Dockerfile.base-devel

.image:
  stage: image
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  before_script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json

image:base:
  extends: .image
  except:
    - master
    - add-base-devel-tags
    - schedules
    - tags
  script:
    - /kaniko/executor
      --whitelist-var-run="false"
      --context $CI_PROJECT_DIR/output
      --dockerfile $CI_PROJECT_DIR/output/Dockerfile.base
      --destination $CI_REGISTRY_IMAGE:base-$CI_COMMIT_REF_SLUG

image:base-devel:
  extends: .image
  except:
    - master
    - add-base-devel-tags
    - schedules
    - tags
  script:
    - /kaniko/executor
      --whitelist-var-run="false"
      --context $CI_PROJECT_DIR/output
      --dockerfile $CI_PROJECT_DIR/output/Dockerfile.base-devel
      --destination $CI_REGISTRY_IMAGE:base-devel-$CI_COMMIT_REF_SLUG

image:base:secure:
  extends: .image
  tags:
    - secure
  only:
    - master
    - add-base-devel-tags
    - schedules
  except:
    - tags
  before_script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$GITLAB_PROJECT_USER\",\"password\":\"$GITLAB_PROJECT_TOKEN\"}}}" > /kaniko/.docker/config.json
  script:
    - /kaniko/executor
      --whitelist-var-run="false"
      --context $CI_PROJECT_DIR/output
      --dockerfile $CI_PROJECT_DIR/output/Dockerfile.base
      --destination $CI_REGISTRY_IMAGE:base-$CI_COMMIT_REF_SLUG

image:base-devel:secure:
  extends: .image
  tags:
    - secure
  only:
    - master
    - add-base-devel-tags
    - schedules
  except:
    - tags
  before_script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$GITLAB_PROJECT_USER\",\"password\":\"$GITLAB_PROJECT_TOKEN\"}}}" > /kaniko/.docker/config.json
  script:
    - /kaniko/executor
      --whitelist-var-run="false"
      --context $CI_PROJECT_DIR/output
      --dockerfile $CI_PROJECT_DIR/output/Dockerfile.base-devel
      --destination $CI_REGISTRY_IMAGE:base-devel-$CI_COMMIT_REF_SLUG

image:base:publish:secure:
  extends: .image
  tags:
    - secure
  only:
    - tags
  before_script:
    - echo "{\"auths\":{\"https://index.docker.io/v1/\":{\"username\":\"$DOCKER_USERNAME\",\"password\":\"$DOCKER_ACCESS_TOKEN\"}}}" > /kaniko/.docker/config.json
  script:
    - /kaniko/executor
      --whitelist-var-run="false"
      --context $CI_PROJECT_DIR/ci/base
      --dockerfile $CI_PROJECT_DIR/ci/base/Dockerfile
      --destination archlinux/archlinux:base-$BUILD_VERSION

image:base-devel:publish:secure:
  extends: .image
  tags:
    - secure
  only:
    - tags
  before_script:
    - echo "{\"auths\":{\"https://index.docker.io/v1/\":{\"username\":\"$DOCKER_USERNAME\",\"password\":\"$DOCKER_ACCESS_TOKEN\"}}}" > /kaniko/.docker/config.json
  script:
    - /kaniko/executor
      --whitelist-var-run="false"
      --context $CI_PROJECT_DIR/ci/base-devel
      --dockerfile $CI_PROJECT_DIR/ci/base-devel/Dockerfile
      --destination archlinux/archlinux:base-devel-$BUILD_VERSION

.test:
  stage: test
  dependencies: []
  script:
    - pacman -Sy
    - pacman -Qqk
    - pacman -Syu --noconfirm docker grep
    - docker -v
    - id -u http
    - locale | grep -q UTF-8

test:base:
  extends: .test
  image: $CI_REGISTRY_IMAGE:base-$CI_COMMIT_REF_SLUG
  except:
    - tags

test:base-devel:
  extends: .test
  image: $CI_REGISTRY_IMAGE:base-devel-$CI_COMMIT_REF_SLUG
  except:
    - tags
  after_script:
    - gcc -v
    - g++ -v
    - make -v

release:
  stage: release
  tags:
    - secure
  only:
    refs:
      - schedules
    variables:
      - $SCHEDULED_PUBLISH == "TRUE"
  before_script:
    - pacman -Syu --noconfirm python-gitlab
  script:
    - python ci/release.py

# Publish base to the Arch Linux group namespace: https://hub.docker.com/r/archlinux/archlinux
publish:
  stage: publish
  tags:
    - secure
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: [""]
  variables:
    GIT_STRATEGY: none
  only:
    - tags
  before_script:
    - echo $DOCKER_ACCESS_TOKEN | crane auth login -u $DOCKER_USERNAME --password-stdin index.docker.io
  script:
    - crane tag archlinux/archlinux:base-$BUILD_VERSION base
    - crane tag archlinux/archlinux:base-$BUILD_VERSION latest
    - crane tag archlinux/archlinux:base-devel-$BUILD_VERSION base-devel

# Publish to the official Docker namespace: https://hub.docker.com/_/archlinux
# publish:official:
# TODO No idea right now how we're going to automatically do the official Docker Hub pull request
